
stm32World_Timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003f9c  08003f9c  00004f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa4  08003fa4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf93  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9e  00000000  00000000  0001102b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  00012ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  00013720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd3d  00000000  00000000  000140bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc6a  00000000  00000000  00033dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1ed6  00000000  00000000  00041a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010393a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b64  00000000  00000000  00103980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001074e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003eec 	.word	0x08003eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003eec 	.word	0x08003eec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ch, 1, HAL_MAX_DELAY);
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f002 f9cf 	bl	8002914 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000cc 	.word	0x200000cc

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb5d 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f839 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f943 	bl	800081c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f917 	bl	80007c8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800059a:	f000 f89d 	bl	80006d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\n\n START BLINKING STM32WORLD_TIMER2....");
 800059e:	4814      	ldr	r0, [pc, #80]	@ (80005f0 <main+0x6c>)
 80005a0:	f002 fe36 	bl	8003210 <iprintf>
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <main+0x70>)
 80005a8:	f001 fb80 	bl	8001cac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now=0, next_tick = 1000 , loop_cnt =0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  while (1)
  {
      now = uwTick;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x74>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	607b      	str	r3, [r7, #4]
      if ( now >= next_tick){
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d30f      	bcc.n	80005e8 <main+0x64>
          printf("tick %lu and loop count %lu \n",now/1000,loop_cnt);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <main+0x78>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	099b      	lsrs	r3, r3, #6
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	4619      	mov	r1, r3
 80005d6:	480a      	ldr	r0, [pc, #40]	@ (8000600 <main+0x7c>)
 80005d8:	f002 fe1a 	bl	8003210 <iprintf>
          next_tick = now+1000;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005e2:	60fb      	str	r3, [r7, #12]
          loop_cnt =0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
      }
     ++ loop_cnt;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60bb      	str	r3, [r7, #8]
      now = uwTick;
 80005ee:	e7e4      	b.n	80005ba <main+0x36>
 80005f0:	08003f04 	.word	0x08003f04
 80005f4:	20000084 	.word	0x20000084
 80005f8:	20000118 	.word	0x20000118
 80005fc:	10624dd3 	.word	0x10624dd3
 8000600:	08003f30 	.word	0x08003f30

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe51 	bl	80032ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000678:	23a8      	movs	r3, #168	@ 0xa8
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fdd1 	bl	8001230 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 f8f8 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2105      	movs	r1, #5
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f832 	bl	8001720 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 f8e1 	bl	8000888 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	@ 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000708:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800070a:	4a2e      	ldr	r2, [pc, #184]	@ (80007c4 <MX_TIM4_Init+0xec>)
 800070c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 59000;
 800070e:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 8000710:	f24e 6278 	movw	r2, #59000	@ 0xe678
 8000714:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1399;
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800071e:	f240 5277 	movw	r2, #1399	@ 0x577
 8000722:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000730:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 8000732:	f001 fa13 	bl	8001b5c <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800073c:	f000 f8a4 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800074a:	4619      	mov	r1, r3
 800074c:	481c      	ldr	r0, [pc, #112]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800074e:	f001 fc37 	bl	8001fc0 <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000758:	f000 f896 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800075c:	4818      	ldr	r0, [pc, #96]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800075e:	f001 fa4c 	bl	8001bfa <HAL_TIM_PWM_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 f88e 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 800077c:	f001 fffe 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 f87f 	bl	8000888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078a:	2360      	movs	r3, #96	@ 0x60
 800078c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 700;
 800078e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000792:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 80007a4:	f001 fb4a 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80007ae:	f000 f86b 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007b2:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <MX_TIM4_Init+0xe8>)
 80007b4:	f000 f8b8 	bl	8000928 <HAL_TIM_MspPostInit>

}
 80007b8:	bf00      	nop
 80007ba:	3738      	adds	r7, #56	@ 0x38
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000084 	.word	0x20000084
 80007c4:	40000800 	.word	0x40000800

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART1_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 8000800:	f002 f838 	bl	8002874 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f83d 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000cc 	.word	0x200000cc
 8000818:	40011000 	.word	0x40011000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_GPIO_Init+0x68>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <MX_GPIO_Init+0x68>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x68>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <HAL_TIM_Base_MspInit+0x3c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10d      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_TIM_Base_MspInit+0x40>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x40>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_TIM_Base_MspInit+0x40>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40000800 	.word	0x40000800
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <HAL_TIM_MspPostInit+0x68>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d11d      	bne.n	8000986 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_TIM_MspPostInit+0x6c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <HAL_TIM_MspPostInit+0x6c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_TIM_MspPostInit+0x6c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_TIM_MspPostInit+0x70>)
 8000982:	f000 fab9 	bl	8000ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40000800 	.word	0x40000800
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a14:	f000 fa70 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40011000 	.word	0x40011000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 f933 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e00a      	b.n	8000ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9c:	f3af 8000 	nop.w
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	b2ca      	uxtb	r2, r1
 8000aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dbf0      	blt.n	8000a9c <_read+0x12>
  }

  return len;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e009      	b.n	8000aea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	60ba      	str	r2, [r7, #8]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd3e 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	dbf1      	blt.n	8000ad6 <_write+0x12>
  }
  return len;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_close>:

int _close(int file)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b24:	605a      	str	r2, [r3, #4]
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_isatty>:

int _isatty(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f002 fbe0 	bl	8003358 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000114 	.word	0x20000114
 8000bcc:	20000268 	.word	0x20000268

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 fb9f 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fcad 	bl	8000584 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c38:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000c3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c40:	20000268 	.word	0x20000268

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f90d 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe0a 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f917 	bl	8000ede <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f8ed 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000118 	.word	0x20000118

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000118 	.word	0x20000118

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b60      	ldr	r3, [pc, #384]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a5f      	ldr	r2, [pc, #380]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5b      	ldr	r2, [pc, #364]	@ (8001208 <HAL_GPIO_Init+0x310>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	@ (8001210 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	@ (8001214 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001218 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001220 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001228 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x310>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <HAL_GPIO_Init+0x334>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	@ (800122c <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <HAL_GPIO_Init+0x334>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e267      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800124e:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b85      	ldr	r3, [pc, #532]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b82      	ldr	r3, [pc, #520]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b76      	ldr	r3, [pc, #472]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b69      	ldr	r3, [pc, #420]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a68      	ldr	r2, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fd14 	bl	8000d14 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fd10 	bl	8000d14 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	@ 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e207      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5b      	ldr	r3, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fd00 	bl	8000d14 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcfc 	bl	8000d14 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	@ 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f3      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001346:	4b4a      	ldr	r3, [pc, #296]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b41      	ldr	r3, [pc, #260]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4937      	ldr	r1, [pc, #220]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <HAL_RCC_OscConfig+0x244>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fcb5 	bl	8000d14 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fcb1 	bl	8000d14 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a8      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4925      	ldr	r1, [pc, #148]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_RCC_OscConfig+0x244>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc94 	bl	8000d14 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc90 	bl	8000d14 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e187      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_RCC_OscConfig+0x248>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc74 	bl	8000d14 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc70 	bl	8000d14 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e167      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x240>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_RCC_OscConfig+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc5d 	bl	8000d14 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fc59 	bl	8000d14 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e150      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b88      	ldr	r3, [pc, #544]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8097 	beq.w	80015c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b81      	ldr	r3, [pc, #516]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a7c      	ldr	r2, [pc, #496]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b7a      	ldr	r3, [pc, #488]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b77      	ldr	r3, [pc, #476]	@ (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b74      	ldr	r3, [pc, #464]	@ (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a73      	ldr	r2, [pc, #460]	@ (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc19 	bl	8000d14 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fc15 	bl	8000d14 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e10c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b6a      	ldr	r3, [pc, #424]	@ (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x2ea>
 800150c:	4b64      	ldr	r3, [pc, #400]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001510:	4a63      	ldr	r2, [pc, #396]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	@ 0x70
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x30c>
 8001522:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a5e      	ldr	r2, [pc, #376]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	4b5c      	ldr	r3, [pc, #368]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a5b      	ldr	r2, [pc, #364]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800153c:	4b58      	ldr	r3, [pc, #352]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001540:	4a57      	ldr	r2, [pc, #348]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	@ 0x70
 8001548:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154c:	4a54      	ldr	r2, [pc, #336]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fbda 	bl	8000d14 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fbd6 	bl	8000d14 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0cb      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ee      	beq.n	8001564 <HAL_RCC_OscConfig+0x334>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fbc4 	bl	8000d14 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fbc0 	bl	8000d14 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0b5      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a1 	beq.w	8001710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ce:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d05c      	beq.n	8001694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d141      	bne.n	8001666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	@ (80016a8 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb94 	bl	8000d14 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb90 	bl	8000d14 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e087      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	491b      	ldr	r1, [pc, #108]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_RCC_OscConfig+0x478>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb69 	bl	8000d14 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb65 	bl	8000d14 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e05c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x416>
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb52 	bl	8000d14 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb4e 	bl	8000d14 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x444>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d028      	beq.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11a      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa80 	bl	8000d14 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa7c 	bl	8000d14 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f9e0 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08003f50 	.word	0x08003f50
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b094      	sub	sp, #80	@ 0x50
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b79      	ldr	r3, [pc, #484]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80e1 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e0db      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b73      	ldr	r3, [pc, #460]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001924:	e0db      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192a:	e0d8      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b6f      	ldr	r3, [pc, #444]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b6d      	ldr	r3, [pc, #436]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b6a      	ldr	r3, [pc, #424]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800194c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
 800195a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4621      	mov	r1, r4
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	6139      	str	r1, [r7, #16]
 800197c:	4629      	mov	r1, r5
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	ebb2 0801 	subs.w	r8, r2, r1
 80019a4:	4659      	mov	r1, fp
 80019a6:	eb63 0901 	sbc.w	r9, r3, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019be:	4690      	mov	r8, r2
 80019c0:	4699      	mov	r9, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	eb18 0303 	adds.w	r3, r8, r3
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	462b      	mov	r3, r5
 80019cc:	eb49 0303 	adc.w	r3, r9, r3
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019de:	4629      	mov	r1, r5
 80019e0:	028b      	lsls	r3, r1, #10
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e8:	4621      	mov	r1, r4
 80019ea:	028a      	lsls	r2, r1, #10
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f2:	2200      	movs	r2, #0
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019fc:	f7fe fc38 	bl	8000270 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a08:	e058      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	4611      	mov	r1, r2
 8001a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a24:	4642      	mov	r2, r8
 8001a26:	464b      	mov	r3, r9
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0159      	lsls	r1, r3, #5
 8001a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a36:	0150      	lsls	r0, r2, #5
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a42:	4649      	mov	r1, r9
 8001a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a60:	eb63 050b 	sbc.w	r5, r3, fp
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4643      	mov	r3, r8
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	464b      	mov	r3, r9
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab0:	f7fe fbde 	bl	8000270 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3750      	adds	r7, #80	@ 0x50
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08003f60 	.word	0x08003f60

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffdc 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0b5b      	lsrs	r3, r3, #13
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	@ (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08003f60 	.word	0x08003f60

08001b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e041      	b.n	8001bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7fe feae 	bl	80008e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 fad8 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e041      	b.n	8001c90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f839 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 fa89 	bl	8002150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_PWM_Start+0x24>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e022      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d109      	bne.n	8001cea <HAL_TIM_PWM_Start+0x3e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e015      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_PWM_Start+0x58>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e008      	b.n	8001d16 <HAL_TIM_PWM_Start+0x6a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07c      	b.n	8001e18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d104      	bne.n	8001d2e <HAL_TIM_PWM_Start+0x82>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d2c:	e013      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d104      	bne.n	8001d3e <HAL_TIM_PWM_Start+0x92>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d3c:	e00b      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d104      	bne.n	8001d4e <HAL_TIM_PWM_Start+0xa2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d4c:	e003      	b.n	8001d56 <HAL_TIM_PWM_Start+0xaa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fce6 	bl	8002730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2d      	ldr	r2, [pc, #180]	@ (8001e20 <HAL_TIM_PWM_Start+0x174>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <HAL_TIM_PWM_Start+0xcc>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2c      	ldr	r2, [pc, #176]	@ (8001e24 <HAL_TIM_PWM_Start+0x178>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_TIM_PWM_Start+0xd0>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_TIM_PWM_Start+0xd2>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_TIM_PWM_Start+0x174>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da4:	d01d      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_TIM_PWM_Start+0x17c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d018      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_TIM_PWM_Start+0x180>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_TIM_PWM_Start+0x184>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00e      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <HAL_TIM_PWM_Start+0x178>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	@ (8001e34 <HAL_TIM_PWM_Start+0x188>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_TIM_PWM_Start+0x136>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_TIM_PWM_Start+0x18c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d111      	bne.n	8001e06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b06      	cmp	r3, #6
 8001df2:	d010      	beq.n	8001e16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e04:	e007      	b.n	8001e16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010400 	.word	0x40010400
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40001800 	.word	0x40001800

08001e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0ae      	b.n	8001fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	f200 809f 	bhi.w	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08001fa9 	.word	0x08001fa9
 8001e78:	08001fa9 	.word	0x08001fa9
 8001e7c:	08001fa9 	.word	0x08001fa9
 8001e80:	08001ee5 	.word	0x08001ee5
 8001e84:	08001fa9 	.word	0x08001fa9
 8001e88:	08001fa9 	.word	0x08001fa9
 8001e8c:	08001fa9 	.word	0x08001fa9
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001fa9 	.word	0x08001fa9
 8001e98:	08001fa9 	.word	0x08001fa9
 8001e9c:	08001fa9 	.word	0x08001fa9
 8001ea0:	08001f67 	.word	0x08001f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f9f6 	bl	800229c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	619a      	str	r2, [r3, #24]
      break;
 8001ee2:	e064      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa46 	bl	800237c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	021a      	lsls	r2, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
      break;
 8001f24:	e043      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fa9b 	bl	8002468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0208 	orr.w	r2, r2, #8
 8001f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0204 	bic.w	r2, r2, #4
 8001f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      break;
 8001f64:	e023      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 faef 	bl	8002550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69d9      	ldr	r1, [r3, #28]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	021a      	lsls	r2, r3, #8
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	61da      	str	r2, [r3, #28]
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	75fb      	strb	r3, [r7, #23]
      break;
 8001fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIM_ConfigClockSource+0x1c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0b4      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x186>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002014:	d03e      	beq.n	8002094 <HAL_TIM_ConfigClockSource+0xd4>
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800201a:	f200 8087 	bhi.w	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002022:	f000 8086 	beq.w	8002132 <HAL_TIM_ConfigClockSource+0x172>
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800202a:	d87f      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b70      	cmp	r3, #112	@ 0x70
 800202e:	d01a      	beq.n	8002066 <HAL_TIM_ConfigClockSource+0xa6>
 8002030:	2b70      	cmp	r3, #112	@ 0x70
 8002032:	d87b      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b60      	cmp	r3, #96	@ 0x60
 8002036:	d050      	beq.n	80020da <HAL_TIM_ConfigClockSource+0x11a>
 8002038:	2b60      	cmp	r3, #96	@ 0x60
 800203a:	d877      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b50      	cmp	r3, #80	@ 0x50
 800203e:	d03c      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0xfa>
 8002040:	2b50      	cmp	r3, #80	@ 0x50
 8002042:	d873      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b40      	cmp	r3, #64	@ 0x40
 8002046:	d058      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x13a>
 8002048:	2b40      	cmp	r3, #64	@ 0x40
 800204a:	d86f      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b30      	cmp	r3, #48	@ 0x30
 800204e:	d064      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b30      	cmp	r3, #48	@ 0x30
 8002052:	d86b      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b20      	cmp	r3, #32
 8002056:	d060      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002058:	2b20      	cmp	r3, #32
 800205a:	d867      	bhi.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05c      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002060:	2b10      	cmp	r3, #16
 8002062:	d05a      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x15a>
 8002064:	e062      	b.n	800212c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002076:	f000 fb3b 	bl	80026f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	609a      	str	r2, [r3, #8]
      break;
 8002092:	e04f      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	f000 fb24 	bl	80026f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b6:	609a      	str	r2, [r3, #8]
      break;
 80020b8:	e03c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	461a      	mov	r2, r3
 80020c8:	f000 fa98 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2150      	movs	r1, #80	@ 0x50
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 faf1 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80020d8:	e02c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 fab7 	bl	800265a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2160      	movs	r1, #96	@ 0x60
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fae1 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80020f8:	e01c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 fa78 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2140      	movs	r1, #64	@ 0x40
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fad1 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002118:	e00c      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f000 fac8 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 800212a:	e003      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e000      	b.n	8002134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <TIM_Base_SetConfig+0x120>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a40      	ldr	r2, [pc, #256]	@ (8002274 <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3f      	ldr	r2, [pc, #252]	@ (8002278 <TIM_Base_SetConfig+0x128>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3e      	ldr	r2, [pc, #248]	@ (800227c <TIM_Base_SetConfig+0x12c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3d      	ldr	r2, [pc, #244]	@ (8002280 <TIM_Base_SetConfig+0x130>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <TIM_Base_SetConfig+0x120>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b0:	d027      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002274 <TIM_Base_SetConfig+0x124>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d023      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <TIM_Base_SetConfig+0x128>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <TIM_Base_SetConfig+0x12c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <TIM_Base_SetConfig+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d017      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <TIM_Base_SetConfig+0x134>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002288 <TIM_Base_SetConfig+0x138>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a29      	ldr	r2, [pc, #164]	@ (800228c <TIM_Base_SetConfig+0x13c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a28      	ldr	r2, [pc, #160]	@ (8002290 <TIM_Base_SetConfig+0x140>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <TIM_Base_SetConfig+0x144>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <TIM_Base_SetConfig+0x148>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <TIM_Base_SetConfig+0x120>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0xf2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <TIM_Base_SetConfig+0x130>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d103      	bne.n	800224a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f043 0204 	orr.w	r2, r3, #4
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	40000400 	.word	0x40000400
 8002278:	40000800 	.word	0x40000800
 800227c:	40000c00 	.word	0x40000c00
 8002280:	40010400 	.word	0x40010400
 8002284:	40014000 	.word	0x40014000
 8002288:	40014400 	.word	0x40014400
 800228c:	40014800 	.word	0x40014800
 8002290:	40001800 	.word	0x40001800
 8002294:	40001c00 	.word	0x40001c00
 8002298:	40002000 	.word	0x40002000

0800229c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f023 0201 	bic.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a20      	ldr	r2, [pc, #128]	@ (8002374 <TIM_OC1_SetConfig+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_OC1_SetConfig+0x64>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <TIM_OC1_SetConfig+0xdc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d10c      	bne.n	800231a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0308 	bic.w	r3, r3, #8
 8002306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <TIM_OC1_SetConfig+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_OC1_SetConfig+0x8e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <TIM_OC1_SetConfig+0xdc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	621a      	str	r2, [r3, #32]
}
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40010000 	.word	0x40010000
 8002378:	40010400 	.word	0x40010400

0800237c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f023 0210 	bic.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 0320 	bic.w	r3, r3, #32
 80023c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <TIM_OC2_SetConfig+0xe4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_OC2_SetConfig+0x68>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <TIM_OC2_SetConfig+0xe8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d10d      	bne.n	8002400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a17      	ldr	r2, [pc, #92]	@ (8002460 <TIM_OC2_SetConfig+0xe4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_OC2_SetConfig+0x94>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <TIM_OC2_SetConfig+0xe8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d113      	bne.n	8002438 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800241e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40010000 	.word	0x40010000
 8002464:	40010400 	.word	0x40010400

08002468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a21      	ldr	r2, [pc, #132]	@ (8002548 <TIM_OC3_SetConfig+0xe0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_OC3_SetConfig+0x66>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a20      	ldr	r2, [pc, #128]	@ (800254c <TIM_OC3_SetConfig+0xe4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10d      	bne.n	80024ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <TIM_OC3_SetConfig+0xe0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_OC3_SetConfig+0x92>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a15      	ldr	r2, [pc, #84]	@ (800254c <TIM_OC3_SetConfig+0xe4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d113      	bne.n	8002522 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	621a      	str	r2, [r3, #32]
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40010000 	.word	0x40010000
 800254c:	40010400 	.word	0x40010400

08002550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800257e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800259a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	031b      	lsls	r3, r3, #12
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <TIM_OC4_SetConfig+0xa4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_OC4_SetConfig+0x68>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a11      	ldr	r2, [pc, #68]	@ (80025f8 <TIM_OC4_SetConfig+0xa8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d109      	bne.n	80025cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40010400 	.word	0x40010400

080025fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f023 0201 	bic.w	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f023 030a 	bic.w	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 0210 	bic.w	r2, r3, #16
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	621a      	str	r2, [r3, #32]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f043 0307 	orr.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800270a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2201      	movs	r2, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1a      	ldr	r2, [r3, #32]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002790:	2302      	movs	r3, #2
 8002792:	e05a      	b.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e0:	d01d      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10c      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4313      	orrs	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40000c00 	.word	0x40000c00
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40001800 	.word	0x40001800

08002874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e042      	b.n	800290c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f87e 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2224      	movs	r2, #36	@ 0x24
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f973 	bl	8002ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	@ 0x28
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	d175      	bne.n	8002a20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_UART_Transmit+0x2c>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e06e      	b.n	8002a22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2221      	movs	r2, #33	@ 0x21
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002952:	f7fe f9df 	bl	8000d14 <HAL_GetTick>
 8002956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296c:	d108      	bne.n	8002980 <HAL_UART_Transmit+0x6c>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e003      	b.n	8002988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002988:	e02e      	b.n	80029e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f848 	bl	8002a2a <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e03a      	b.n	8002a22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	3302      	adds	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e007      	b.n	80029da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1cb      	bne.n	800298a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2140      	movs	r1, #64	@ 0x40
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f814 	bl	8002a2a <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e006      	b.n	8002a22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3a:	e03b      	b.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d037      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe f966 	bl	8000d14 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e03a      	b.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b80      	cmp	r3, #128	@ 0x80
 8002a70:	d020      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b40      	cmp	r3, #64	@ 0x40
 8002a76:	d01d      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d116      	bne.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f81d 	bl	8002adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00f      	b.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d0b4      	beq.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b095      	sub	sp, #84	@ 0x54
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b04:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b0c:	e841 2300 	strex	r3, r2, [r1]
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e5      	bne.n	8002ae4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3314      	adds	r3, #20
 8002b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e5      	bne.n	8002b18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d119      	bne.n	8002b88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	e853 3f00 	ldrex	r3, [r3]
 8002b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f023 0310 	bic.w	r3, r3, #16
 8002b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b74:	61ba      	str	r2, [r7, #24]
 8002b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b78:	6979      	ldr	r1, [r7, #20]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	e841 2300 	strex	r3, r2, [r1]
 8002b80:	613b      	str	r3, [r7, #16]
   return(result);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e5      	bne.n	8002b54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b96:	bf00      	nop
 8002b98:	3754      	adds	r7, #84	@ 0x54
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba8:	b0c0      	sub	sp, #256	@ 0x100
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	ea40 0301 	orr.w	r3, r0, r1
 8002bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bfc:	f021 010c 	bic.w	r1, r1, #12
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1e:	6999      	ldr	r1, [r3, #24]
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	ea40 0301 	orr.w	r3, r0, r1
 8002c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b8f      	ldr	r3, [pc, #572]	@ (8002e70 <UART_SetConfig+0x2cc>)
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d005      	beq.n	8002c44 <UART_SetConfig+0xa0>
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e74 <UART_SetConfig+0x2d0>)
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d104      	bne.n	8002c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c44:	f7fe ff76 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 8002c48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c4c:	e003      	b.n	8002c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c4e:	f7fe ff5d 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 8002c52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c60:	f040 810c 	bne.w	8002e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	1891      	adds	r1, r2, r2
 8002c7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c7e:	415b      	adcs	r3, r3
 8002c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c86:	4621      	mov	r1, r4
 8002c88:	eb12 0801 	adds.w	r8, r2, r1
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	eb43 0901 	adc.w	r9, r3, r1
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	4699      	mov	r9, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	eb18 0303 	adds.w	r3, r8, r3
 8002cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	eb49 0303 	adc.w	r3, r9, r3
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	18db      	adds	r3, r3, r3
 8002cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cd8:	4613      	mov	r3, r2
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ce8:	f7fd fac2 	bl	8000270 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <UART_SetConfig+0x2d4>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011c      	lsls	r4, r3, #4
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d14:	415b      	adcs	r3, r3
 8002d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d22:	4649      	mov	r1, r9
 8002d24:	eb43 0b01 	adc.w	fp, r3, r1
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	469b      	mov	fp, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	eb1a 0303 	adds.w	r3, sl, r3
 8002d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	18db      	adds	r3, r3, r3
 8002d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d6e:	4613      	mov	r3, r2
 8002d70:	eb42 0303 	adc.w	r3, r2, r3
 8002d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d7e:	f7fd fa77 	bl	8000270 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	4b3b      	ldr	r3, [pc, #236]	@ (8002e78 <UART_SetConfig+0x2d4>)
 8002d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2264      	movs	r2, #100	@ 0x64
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	1acb      	subs	r3, r1, r3
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d9e:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <UART_SetConfig+0x2d4>)
 8002da0:	fba3 2302 	umull	r2, r3, r3, r2
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dac:	441c      	add	r4, r3
 8002dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	1891      	adds	r1, r2, r2
 8002dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dc8:	415b      	adcs	r3, r3
 8002dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	1851      	adds	r1, r2, r1
 8002dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	414b      	adcs	r3, r1
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002de8:	4659      	mov	r1, fp
 8002dea:	00cb      	lsls	r3, r1, #3
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df2:	4651      	mov	r1, sl
 8002df4:	00ca      	lsls	r2, r1, #3
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e04:	464b      	mov	r3, r9
 8002e06:	460a      	mov	r2, r1
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e24:	460b      	mov	r3, r1
 8002e26:	18db      	adds	r3, r3, r3
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e3a:	f7fd fa19 	bl	8000270 <__aeabi_uldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <UART_SetConfig+0x2d4>)
 8002e44:	fba3 1302 	umull	r1, r3, r3, r2
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	2164      	movs	r1, #100	@ 0x64
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	3332      	adds	r3, #50	@ 0x32
 8002e56:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <UART_SetConfig+0x2d4>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	f003 0207 	and.w	r2, r3, #7
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4422      	add	r2, r4
 8002e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e6c:	e106      	b.n	800307c <UART_SetConfig+0x4d8>
 8002e6e:	bf00      	nop
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e8e:	4642      	mov	r2, r8
 8002e90:	464b      	mov	r3, r9
 8002e92:	1891      	adds	r1, r2, r2
 8002e94:	6239      	str	r1, [r7, #32]
 8002e96:	415b      	adcs	r3, r3
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	1854      	adds	r4, r2, r1
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	eb43 0501 	adc.w	r5, r3, r1
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	eb45 0303 	adc.w	r3, r5, r3
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002eea:	4629      	mov	r1, r5
 8002eec:	008b      	lsls	r3, r1, #2
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	008a      	lsls	r2, r1, #2
 8002ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002efc:	f7fd f9b8 	bl	8000270 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4b60      	ldr	r3, [pc, #384]	@ (8003088 <UART_SetConfig+0x4e4>)
 8002f06:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	011c      	lsls	r4, r3, #4
 8002f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f20:	4642      	mov	r2, r8
 8002f22:	464b      	mov	r3, r9
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	61b9      	str	r1, [r7, #24]
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f30:	4641      	mov	r1, r8
 8002f32:	1851      	adds	r1, r2, r1
 8002f34:	6139      	str	r1, [r7, #16]
 8002f36:	4649      	mov	r1, r9
 8002f38:	414b      	adcs	r3, r1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f48:	4659      	mov	r1, fp
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4651      	mov	r1, sl
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f64:	464b      	mov	r3, r9
 8002f66:	460a      	mov	r2, r1
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f88:	4649      	mov	r1, r9
 8002f8a:	008b      	lsls	r3, r1, #2
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f92:	4641      	mov	r1, r8
 8002f94:	008a      	lsls	r2, r1, #2
 8002f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f9a:	f7fd f969 	bl	8000270 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4b38      	ldr	r3, [pc, #224]	@ (8003088 <UART_SetConfig+0x4e4>)
 8002fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2264      	movs	r2, #100	@ 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	@ 0x32
 8002fb8:	4a33      	ldr	r2, [pc, #204]	@ (8003088 <UART_SetConfig+0x4e4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc4:	441c      	add	r4, r3
 8002fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fca:	2200      	movs	r2, #0
 8002fcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fce:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	1851      	adds	r1, r2, r1
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	4649      	mov	r1, r9
 8002fec:	414b      	adcs	r3, r1
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	00cb      	lsls	r3, r1, #3
 8003000:	4651      	mov	r1, sl
 8003002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003006:	4651      	mov	r1, sl
 8003008:	00ca      	lsls	r2, r1, #3
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	4603      	mov	r3, r0
 8003010:	4642      	mov	r2, r8
 8003012:	189b      	adds	r3, r3, r2
 8003014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003016:	464b      	mov	r3, r9
 8003018:	460a      	mov	r2, r1
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	663b      	str	r3, [r7, #96]	@ 0x60
 800302a:	667a      	str	r2, [r7, #100]	@ 0x64
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003038:	4649      	mov	r1, r9
 800303a:	008b      	lsls	r3, r1, #2
 800303c:	4641      	mov	r1, r8
 800303e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003042:	4641      	mov	r1, r8
 8003044:	008a      	lsls	r2, r1, #2
 8003046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800304a:	f7fd f911 	bl	8000270 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <UART_SetConfig+0x4e4>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	@ 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	3332      	adds	r3, #50	@ 0x32
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <UART_SetConfig+0x4e4>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4422      	add	r2, r4
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003088:	51eb851f 	.word	0x51eb851f

0800308c <std>:
 800308c:	2300      	movs	r3, #0
 800308e:	b510      	push	{r4, lr}
 8003090:	4604      	mov	r4, r0
 8003092:	e9c0 3300 	strd	r3, r3, [r0]
 8003096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309a:	6083      	str	r3, [r0, #8]
 800309c:	8181      	strh	r1, [r0, #12]
 800309e:	6643      	str	r3, [r0, #100]	@ 0x64
 80030a0:	81c2      	strh	r2, [r0, #14]
 80030a2:	6183      	str	r3, [r0, #24]
 80030a4:	4619      	mov	r1, r3
 80030a6:	2208      	movs	r2, #8
 80030a8:	305c      	adds	r0, #92	@ 0x5c
 80030aa:	f000 f906 	bl	80032ba <memset>
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <std+0x58>)
 80030b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <std+0x5c>)
 80030b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <std+0x60>)
 80030b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030ba:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <std+0x64>)
 80030bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <std+0x68>)
 80030c0:	6224      	str	r4, [r4, #32]
 80030c2:	429c      	cmp	r4, r3
 80030c4:	d006      	beq.n	80030d4 <std+0x48>
 80030c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030ca:	4294      	cmp	r4, r2
 80030cc:	d002      	beq.n	80030d4 <std+0x48>
 80030ce:	33d0      	adds	r3, #208	@ 0xd0
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d105      	bne.n	80030e0 <std+0x54>
 80030d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030dc:	f000 b966 	b.w	80033ac <__retarget_lock_init_recursive>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop
 80030e4:	08003235 	.word	0x08003235
 80030e8:	08003257 	.word	0x08003257
 80030ec:	0800328f 	.word	0x0800328f
 80030f0:	080032b3 	.word	0x080032b3
 80030f4:	2000011c 	.word	0x2000011c

080030f8 <stdio_exit_handler>:
 80030f8:	4a02      	ldr	r2, [pc, #8]	@ (8003104 <stdio_exit_handler+0xc>)
 80030fa:	4903      	ldr	r1, [pc, #12]	@ (8003108 <stdio_exit_handler+0x10>)
 80030fc:	4803      	ldr	r0, [pc, #12]	@ (800310c <stdio_exit_handler+0x14>)
 80030fe:	f000 b869 	b.w	80031d4 <_fwalk_sglue>
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c
 8003108:	08003c4d 	.word	0x08003c4d
 800310c:	2000001c 	.word	0x2000001c

08003110 <cleanup_stdio>:
 8003110:	6841      	ldr	r1, [r0, #4]
 8003112:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <cleanup_stdio+0x34>)
 8003114:	4299      	cmp	r1, r3
 8003116:	b510      	push	{r4, lr}
 8003118:	4604      	mov	r4, r0
 800311a:	d001      	beq.n	8003120 <cleanup_stdio+0x10>
 800311c:	f000 fd96 	bl	8003c4c <_fflush_r>
 8003120:	68a1      	ldr	r1, [r4, #8]
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <cleanup_stdio+0x38>)
 8003124:	4299      	cmp	r1, r3
 8003126:	d002      	beq.n	800312e <cleanup_stdio+0x1e>
 8003128:	4620      	mov	r0, r4
 800312a:	f000 fd8f 	bl	8003c4c <_fflush_r>
 800312e:	68e1      	ldr	r1, [r4, #12]
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <cleanup_stdio+0x3c>)
 8003132:	4299      	cmp	r1, r3
 8003134:	d004      	beq.n	8003140 <cleanup_stdio+0x30>
 8003136:	4620      	mov	r0, r4
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800313c:	f000 bd86 	b.w	8003c4c <_fflush_r>
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	2000011c 	.word	0x2000011c
 8003148:	20000184 	.word	0x20000184
 800314c:	200001ec 	.word	0x200001ec

08003150 <global_stdio_init.part.0>:
 8003150:	b510      	push	{r4, lr}
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <global_stdio_init.part.0+0x30>)
 8003154:	4c0b      	ldr	r4, [pc, #44]	@ (8003184 <global_stdio_init.part.0+0x34>)
 8003156:	4a0c      	ldr	r2, [pc, #48]	@ (8003188 <global_stdio_init.part.0+0x38>)
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	4620      	mov	r0, r4
 800315c:	2200      	movs	r2, #0
 800315e:	2104      	movs	r1, #4
 8003160:	f7ff ff94 	bl	800308c <std>
 8003164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003168:	2201      	movs	r2, #1
 800316a:	2109      	movs	r1, #9
 800316c:	f7ff ff8e 	bl	800308c <std>
 8003170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003174:	2202      	movs	r2, #2
 8003176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800317a:	2112      	movs	r1, #18
 800317c:	f7ff bf86 	b.w	800308c <std>
 8003180:	20000254 	.word	0x20000254
 8003184:	2000011c 	.word	0x2000011c
 8003188:	080030f9 	.word	0x080030f9

0800318c <__sfp_lock_acquire>:
 800318c:	4801      	ldr	r0, [pc, #4]	@ (8003194 <__sfp_lock_acquire+0x8>)
 800318e:	f000 b90e 	b.w	80033ae <__retarget_lock_acquire_recursive>
 8003192:	bf00      	nop
 8003194:	2000025d 	.word	0x2000025d

08003198 <__sfp_lock_release>:
 8003198:	4801      	ldr	r0, [pc, #4]	@ (80031a0 <__sfp_lock_release+0x8>)
 800319a:	f000 b909 	b.w	80033b0 <__retarget_lock_release_recursive>
 800319e:	bf00      	nop
 80031a0:	2000025d 	.word	0x2000025d

080031a4 <__sinit>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	4604      	mov	r4, r0
 80031a8:	f7ff fff0 	bl	800318c <__sfp_lock_acquire>
 80031ac:	6a23      	ldr	r3, [r4, #32]
 80031ae:	b11b      	cbz	r3, 80031b8 <__sinit+0x14>
 80031b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b4:	f7ff bff0 	b.w	8003198 <__sfp_lock_release>
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__sinit+0x28>)
 80031ba:	6223      	str	r3, [r4, #32]
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <__sinit+0x2c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f5      	bne.n	80031b0 <__sinit+0xc>
 80031c4:	f7ff ffc4 	bl	8003150 <global_stdio_init.part.0>
 80031c8:	e7f2      	b.n	80031b0 <__sinit+0xc>
 80031ca:	bf00      	nop
 80031cc:	08003111 	.word	0x08003111
 80031d0:	20000254 	.word	0x20000254

080031d4 <_fwalk_sglue>:
 80031d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d8:	4607      	mov	r7, r0
 80031da:	4688      	mov	r8, r1
 80031dc:	4614      	mov	r4, r2
 80031de:	2600      	movs	r6, #0
 80031e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031e4:	f1b9 0901 	subs.w	r9, r9, #1
 80031e8:	d505      	bpl.n	80031f6 <_fwalk_sglue+0x22>
 80031ea:	6824      	ldr	r4, [r4, #0]
 80031ec:	2c00      	cmp	r4, #0
 80031ee:	d1f7      	bne.n	80031e0 <_fwalk_sglue+0xc>
 80031f0:	4630      	mov	r0, r6
 80031f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f6:	89ab      	ldrh	r3, [r5, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d907      	bls.n	800320c <_fwalk_sglue+0x38>
 80031fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003200:	3301      	adds	r3, #1
 8003202:	d003      	beq.n	800320c <_fwalk_sglue+0x38>
 8003204:	4629      	mov	r1, r5
 8003206:	4638      	mov	r0, r7
 8003208:	47c0      	blx	r8
 800320a:	4306      	orrs	r6, r0
 800320c:	3568      	adds	r5, #104	@ 0x68
 800320e:	e7e9      	b.n	80031e4 <_fwalk_sglue+0x10>

08003210 <iprintf>:
 8003210:	b40f      	push	{r0, r1, r2, r3}
 8003212:	b507      	push	{r0, r1, r2, lr}
 8003214:	4906      	ldr	r1, [pc, #24]	@ (8003230 <iprintf+0x20>)
 8003216:	ab04      	add	r3, sp, #16
 8003218:	6808      	ldr	r0, [r1, #0]
 800321a:	f853 2b04 	ldr.w	r2, [r3], #4
 800321e:	6881      	ldr	r1, [r0, #8]
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	f000 f9e9 	bl	80035f8 <_vfiprintf_r>
 8003226:	b003      	add	sp, #12
 8003228:	f85d eb04 	ldr.w	lr, [sp], #4
 800322c:	b004      	add	sp, #16
 800322e:	4770      	bx	lr
 8003230:	20000018 	.word	0x20000018

08003234 <__sread>:
 8003234:	b510      	push	{r4, lr}
 8003236:	460c      	mov	r4, r1
 8003238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323c:	f000 f868 	bl	8003310 <_read_r>
 8003240:	2800      	cmp	r0, #0
 8003242:	bfab      	itete	ge
 8003244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003246:	89a3      	ldrhlt	r3, [r4, #12]
 8003248:	181b      	addge	r3, r3, r0
 800324a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800324e:	bfac      	ite	ge
 8003250:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003252:	81a3      	strhlt	r3, [r4, #12]
 8003254:	bd10      	pop	{r4, pc}

08003256 <__swrite>:
 8003256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325a:	461f      	mov	r7, r3
 800325c:	898b      	ldrh	r3, [r1, #12]
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	4605      	mov	r5, r0
 8003262:	460c      	mov	r4, r1
 8003264:	4616      	mov	r6, r2
 8003266:	d505      	bpl.n	8003274 <__swrite+0x1e>
 8003268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326c:	2302      	movs	r3, #2
 800326e:	2200      	movs	r2, #0
 8003270:	f000 f83c 	bl	80032ec <_lseek_r>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800327a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	4632      	mov	r2, r6
 8003282:	463b      	mov	r3, r7
 8003284:	4628      	mov	r0, r5
 8003286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800328a:	f000 b853 	b.w	8003334 <_write_r>

0800328e <__sseek>:
 800328e:	b510      	push	{r4, lr}
 8003290:	460c      	mov	r4, r1
 8003292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003296:	f000 f829 	bl	80032ec <_lseek_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	bf15      	itete	ne
 80032a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032aa:	81a3      	strheq	r3, [r4, #12]
 80032ac:	bf18      	it	ne
 80032ae:	81a3      	strhne	r3, [r4, #12]
 80032b0:	bd10      	pop	{r4, pc}

080032b2 <__sclose>:
 80032b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b6:	f000 b809 	b.w	80032cc <_close_r>

080032ba <memset>:
 80032ba:	4402      	add	r2, r0
 80032bc:	4603      	mov	r3, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	d100      	bne.n	80032c4 <memset+0xa>
 80032c2:	4770      	bx	lr
 80032c4:	f803 1b01 	strb.w	r1, [r3], #1
 80032c8:	e7f9      	b.n	80032be <memset+0x4>
	...

080032cc <_close_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	4d06      	ldr	r5, [pc, #24]	@ (80032e8 <_close_r+0x1c>)
 80032d0:	2300      	movs	r3, #0
 80032d2:	4604      	mov	r4, r0
 80032d4:	4608      	mov	r0, r1
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	f7fd fc10 	bl	8000afc <_close>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d102      	bne.n	80032e6 <_close_r+0x1a>
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	b103      	cbz	r3, 80032e6 <_close_r+0x1a>
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	20000258 	.word	0x20000258

080032ec <_lseek_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4d07      	ldr	r5, [pc, #28]	@ (800330c <_lseek_r+0x20>)
 80032f0:	4604      	mov	r4, r0
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fd fc25 	bl	8000b4a <_lseek>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_lseek_r+0x1e>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	b103      	cbz	r3, 800330a <_lseek_r+0x1e>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	20000258 	.word	0x20000258

08003310 <_read_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4d07      	ldr	r5, [pc, #28]	@ (8003330 <_read_r+0x20>)
 8003314:	4604      	mov	r4, r0
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	2200      	movs	r2, #0
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f7fd fbb3 	bl	8000a8a <_read>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_read_r+0x1e>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_read_r+0x1e>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000258 	.word	0x20000258

08003334 <_write_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	@ (8003354 <_write_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd fbbe 	bl	8000ac4 <_write>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_write_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_write_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000258 	.word	0x20000258

08003358 <__errno>:
 8003358:	4b01      	ldr	r3, [pc, #4]	@ (8003360 <__errno+0x8>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000018 	.word	0x20000018

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4d0d      	ldr	r5, [pc, #52]	@ (800339c <__libc_init_array+0x38>)
 8003368:	4c0d      	ldr	r4, [pc, #52]	@ (80033a0 <__libc_init_array+0x3c>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	2600      	movs	r6, #0
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	4d0b      	ldr	r5, [pc, #44]	@ (80033a4 <__libc_init_array+0x40>)
 8003376:	4c0c      	ldr	r4, [pc, #48]	@ (80033a8 <__libc_init_array+0x44>)
 8003378:	f000 fdb8 	bl	8003eec <_init>
 800337c:	1b64      	subs	r4, r4, r5
 800337e:	10a4      	asrs	r4, r4, #2
 8003380:	2600      	movs	r6, #0
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	4798      	blx	r3
 800338e:	3601      	adds	r6, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	4798      	blx	r3
 8003398:	3601      	adds	r6, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003fa4 	.word	0x08003fa4
 80033a0:	08003fa4 	.word	0x08003fa4
 80033a4:	08003fa4 	.word	0x08003fa4
 80033a8:	08003fa8 	.word	0x08003fa8

080033ac <__retarget_lock_init_recursive>:
 80033ac:	4770      	bx	lr

080033ae <__retarget_lock_acquire_recursive>:
 80033ae:	4770      	bx	lr

080033b0 <__retarget_lock_release_recursive>:
 80033b0:	4770      	bx	lr
	...

080033b4 <_free_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4605      	mov	r5, r0
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d041      	beq.n	8003440 <_free_r+0x8c>
 80033bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c0:	1f0c      	subs	r4, r1, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bfb8      	it	lt
 80033c6:	18e4      	addlt	r4, r4, r3
 80033c8:	f000 f8e0 	bl	800358c <__malloc_lock>
 80033cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <_free_r+0x90>)
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	b933      	cbnz	r3, 80033e0 <_free_r+0x2c>
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	6014      	str	r4, [r2, #0]
 80033d6:	4628      	mov	r0, r5
 80033d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033dc:	f000 b8dc 	b.w	8003598 <__malloc_unlock>
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	d908      	bls.n	80033f6 <_free_r+0x42>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	1821      	adds	r1, r4, r0
 80033e8:	428b      	cmp	r3, r1
 80033ea:	bf01      	itttt	eq
 80033ec:	6819      	ldreq	r1, [r3, #0]
 80033ee:	685b      	ldreq	r3, [r3, #4]
 80033f0:	1809      	addeq	r1, r1, r0
 80033f2:	6021      	streq	r1, [r4, #0]
 80033f4:	e7ed      	b.n	80033d2 <_free_r+0x1e>
 80033f6:	461a      	mov	r2, r3
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b10b      	cbz	r3, 8003400 <_free_r+0x4c>
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d9fa      	bls.n	80033f6 <_free_r+0x42>
 8003400:	6811      	ldr	r1, [r2, #0]
 8003402:	1850      	adds	r0, r2, r1
 8003404:	42a0      	cmp	r0, r4
 8003406:	d10b      	bne.n	8003420 <_free_r+0x6c>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	4401      	add	r1, r0
 800340c:	1850      	adds	r0, r2, r1
 800340e:	4283      	cmp	r3, r0
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	d1e0      	bne.n	80033d6 <_free_r+0x22>
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	4408      	add	r0, r1
 800341c:	6010      	str	r0, [r2, #0]
 800341e:	e7da      	b.n	80033d6 <_free_r+0x22>
 8003420:	d902      	bls.n	8003428 <_free_r+0x74>
 8003422:	230c      	movs	r3, #12
 8003424:	602b      	str	r3, [r5, #0]
 8003426:	e7d6      	b.n	80033d6 <_free_r+0x22>
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	1821      	adds	r1, r4, r0
 800342c:	428b      	cmp	r3, r1
 800342e:	bf04      	itt	eq
 8003430:	6819      	ldreq	r1, [r3, #0]
 8003432:	685b      	ldreq	r3, [r3, #4]
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	bf04      	itt	eq
 8003438:	1809      	addeq	r1, r1, r0
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	6054      	str	r4, [r2, #4]
 800343e:	e7ca      	b.n	80033d6 <_free_r+0x22>
 8003440:	bd38      	pop	{r3, r4, r5, pc}
 8003442:	bf00      	nop
 8003444:	20000264 	.word	0x20000264

08003448 <sbrk_aligned>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	4e0f      	ldr	r6, [pc, #60]	@ (8003488 <sbrk_aligned+0x40>)
 800344c:	460c      	mov	r4, r1
 800344e:	6831      	ldr	r1, [r6, #0]
 8003450:	4605      	mov	r5, r0
 8003452:	b911      	cbnz	r1, 800345a <sbrk_aligned+0x12>
 8003454:	f000 fcb6 	bl	8003dc4 <_sbrk_r>
 8003458:	6030      	str	r0, [r6, #0]
 800345a:	4621      	mov	r1, r4
 800345c:	4628      	mov	r0, r5
 800345e:	f000 fcb1 	bl	8003dc4 <_sbrk_r>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	d103      	bne.n	800346e <sbrk_aligned+0x26>
 8003466:	f04f 34ff 	mov.w	r4, #4294967295
 800346a:	4620      	mov	r0, r4
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	1cc4      	adds	r4, r0, #3
 8003470:	f024 0403 	bic.w	r4, r4, #3
 8003474:	42a0      	cmp	r0, r4
 8003476:	d0f8      	beq.n	800346a <sbrk_aligned+0x22>
 8003478:	1a21      	subs	r1, r4, r0
 800347a:	4628      	mov	r0, r5
 800347c:	f000 fca2 	bl	8003dc4 <_sbrk_r>
 8003480:	3001      	adds	r0, #1
 8003482:	d1f2      	bne.n	800346a <sbrk_aligned+0x22>
 8003484:	e7ef      	b.n	8003466 <sbrk_aligned+0x1e>
 8003486:	bf00      	nop
 8003488:	20000260 	.word	0x20000260

0800348c <_malloc_r>:
 800348c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003490:	1ccd      	adds	r5, r1, #3
 8003492:	f025 0503 	bic.w	r5, r5, #3
 8003496:	3508      	adds	r5, #8
 8003498:	2d0c      	cmp	r5, #12
 800349a:	bf38      	it	cc
 800349c:	250c      	movcc	r5, #12
 800349e:	2d00      	cmp	r5, #0
 80034a0:	4606      	mov	r6, r0
 80034a2:	db01      	blt.n	80034a8 <_malloc_r+0x1c>
 80034a4:	42a9      	cmp	r1, r5
 80034a6:	d904      	bls.n	80034b2 <_malloc_r+0x26>
 80034a8:	230c      	movs	r3, #12
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	2000      	movs	r0, #0
 80034ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003588 <_malloc_r+0xfc>
 80034b6:	f000 f869 	bl	800358c <__malloc_lock>
 80034ba:	f8d8 3000 	ldr.w	r3, [r8]
 80034be:	461c      	mov	r4, r3
 80034c0:	bb44      	cbnz	r4, 8003514 <_malloc_r+0x88>
 80034c2:	4629      	mov	r1, r5
 80034c4:	4630      	mov	r0, r6
 80034c6:	f7ff ffbf 	bl	8003448 <sbrk_aligned>
 80034ca:	1c43      	adds	r3, r0, #1
 80034cc:	4604      	mov	r4, r0
 80034ce:	d158      	bne.n	8003582 <_malloc_r+0xf6>
 80034d0:	f8d8 4000 	ldr.w	r4, [r8]
 80034d4:	4627      	mov	r7, r4
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	d143      	bne.n	8003562 <_malloc_r+0xd6>
 80034da:	2c00      	cmp	r4, #0
 80034dc:	d04b      	beq.n	8003576 <_malloc_r+0xea>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	4639      	mov	r1, r7
 80034e2:	4630      	mov	r0, r6
 80034e4:	eb04 0903 	add.w	r9, r4, r3
 80034e8:	f000 fc6c 	bl	8003dc4 <_sbrk_r>
 80034ec:	4581      	cmp	r9, r0
 80034ee:	d142      	bne.n	8003576 <_malloc_r+0xea>
 80034f0:	6821      	ldr	r1, [r4, #0]
 80034f2:	1a6d      	subs	r5, r5, r1
 80034f4:	4629      	mov	r1, r5
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7ff ffa6 	bl	8003448 <sbrk_aligned>
 80034fc:	3001      	adds	r0, #1
 80034fe:	d03a      	beq.n	8003576 <_malloc_r+0xea>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	442b      	add	r3, r5
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	f8d8 3000 	ldr.w	r3, [r8]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	bb62      	cbnz	r2, 8003568 <_malloc_r+0xdc>
 800350e:	f8c8 7000 	str.w	r7, [r8]
 8003512:	e00f      	b.n	8003534 <_malloc_r+0xa8>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	1b52      	subs	r2, r2, r5
 8003518:	d420      	bmi.n	800355c <_malloc_r+0xd0>
 800351a:	2a0b      	cmp	r2, #11
 800351c:	d917      	bls.n	800354e <_malloc_r+0xc2>
 800351e:	1961      	adds	r1, r4, r5
 8003520:	42a3      	cmp	r3, r4
 8003522:	6025      	str	r5, [r4, #0]
 8003524:	bf18      	it	ne
 8003526:	6059      	strne	r1, [r3, #4]
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	bf08      	it	eq
 800352c:	f8c8 1000 	streq.w	r1, [r8]
 8003530:	5162      	str	r2, [r4, r5]
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f82f 	bl	8003598 <__malloc_unlock>
 800353a:	f104 000b 	add.w	r0, r4, #11
 800353e:	1d23      	adds	r3, r4, #4
 8003540:	f020 0007 	bic.w	r0, r0, #7
 8003544:	1ac2      	subs	r2, r0, r3
 8003546:	bf1c      	itt	ne
 8003548:	1a1b      	subne	r3, r3, r0
 800354a:	50a3      	strne	r3, [r4, r2]
 800354c:	e7af      	b.n	80034ae <_malloc_r+0x22>
 800354e:	6862      	ldr	r2, [r4, #4]
 8003550:	42a3      	cmp	r3, r4
 8003552:	bf0c      	ite	eq
 8003554:	f8c8 2000 	streq.w	r2, [r8]
 8003558:	605a      	strne	r2, [r3, #4]
 800355a:	e7eb      	b.n	8003534 <_malloc_r+0xa8>
 800355c:	4623      	mov	r3, r4
 800355e:	6864      	ldr	r4, [r4, #4]
 8003560:	e7ae      	b.n	80034c0 <_malloc_r+0x34>
 8003562:	463c      	mov	r4, r7
 8003564:	687f      	ldr	r7, [r7, #4]
 8003566:	e7b6      	b.n	80034d6 <_malloc_r+0x4a>
 8003568:	461a      	mov	r2, r3
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	42a3      	cmp	r3, r4
 800356e:	d1fb      	bne.n	8003568 <_malloc_r+0xdc>
 8003570:	2300      	movs	r3, #0
 8003572:	6053      	str	r3, [r2, #4]
 8003574:	e7de      	b.n	8003534 <_malloc_r+0xa8>
 8003576:	230c      	movs	r3, #12
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	4630      	mov	r0, r6
 800357c:	f000 f80c 	bl	8003598 <__malloc_unlock>
 8003580:	e794      	b.n	80034ac <_malloc_r+0x20>
 8003582:	6005      	str	r5, [r0, #0]
 8003584:	e7d6      	b.n	8003534 <_malloc_r+0xa8>
 8003586:	bf00      	nop
 8003588:	20000264 	.word	0x20000264

0800358c <__malloc_lock>:
 800358c:	4801      	ldr	r0, [pc, #4]	@ (8003594 <__malloc_lock+0x8>)
 800358e:	f7ff bf0e 	b.w	80033ae <__retarget_lock_acquire_recursive>
 8003592:	bf00      	nop
 8003594:	2000025c 	.word	0x2000025c

08003598 <__malloc_unlock>:
 8003598:	4801      	ldr	r0, [pc, #4]	@ (80035a0 <__malloc_unlock+0x8>)
 800359a:	f7ff bf09 	b.w	80033b0 <__retarget_lock_release_recursive>
 800359e:	bf00      	nop
 80035a0:	2000025c 	.word	0x2000025c

080035a4 <__sfputc_r>:
 80035a4:	6893      	ldr	r3, [r2, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	b410      	push	{r4}
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	da08      	bge.n	80035c2 <__sfputc_r+0x1e>
 80035b0:	6994      	ldr	r4, [r2, #24]
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	db01      	blt.n	80035ba <__sfputc_r+0x16>
 80035b6:	290a      	cmp	r1, #10
 80035b8:	d103      	bne.n	80035c2 <__sfputc_r+0x1e>
 80035ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035be:	f000 bb6d 	b.w	8003c9c <__swbuf_r>
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	1c58      	adds	r0, r3, #1
 80035c6:	6010      	str	r0, [r2, #0]
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	4608      	mov	r0, r1
 80035cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <__sfputs_r>:
 80035d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d4:	4606      	mov	r6, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	18d5      	adds	r5, r2, r3
 80035dc:	42ac      	cmp	r4, r5
 80035de:	d101      	bne.n	80035e4 <__sfputs_r+0x12>
 80035e0:	2000      	movs	r0, #0
 80035e2:	e007      	b.n	80035f4 <__sfputs_r+0x22>
 80035e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e8:	463a      	mov	r2, r7
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff ffda 	bl	80035a4 <__sfputc_r>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d1f3      	bne.n	80035dc <__sfputs_r+0xa>
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035f8 <_vfiprintf_r>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	460d      	mov	r5, r1
 80035fe:	b09d      	sub	sp, #116	@ 0x74
 8003600:	4614      	mov	r4, r2
 8003602:	4698      	mov	r8, r3
 8003604:	4606      	mov	r6, r0
 8003606:	b118      	cbz	r0, 8003610 <_vfiprintf_r+0x18>
 8003608:	6a03      	ldr	r3, [r0, #32]
 800360a:	b90b      	cbnz	r3, 8003610 <_vfiprintf_r+0x18>
 800360c:	f7ff fdca 	bl	80031a4 <__sinit>
 8003610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d405      	bmi.n	8003622 <_vfiprintf_r+0x2a>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	059a      	lsls	r2, r3, #22
 800361a:	d402      	bmi.n	8003622 <_vfiprintf_r+0x2a>
 800361c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800361e:	f7ff fec6 	bl	80033ae <__retarget_lock_acquire_recursive>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	d501      	bpl.n	800362c <_vfiprintf_r+0x34>
 8003628:	692b      	ldr	r3, [r5, #16]
 800362a:	b99b      	cbnz	r3, 8003654 <_vfiprintf_r+0x5c>
 800362c:	4629      	mov	r1, r5
 800362e:	4630      	mov	r0, r6
 8003630:	f000 fb72 	bl	8003d18 <__swsetup_r>
 8003634:	b170      	cbz	r0, 8003654 <_vfiprintf_r+0x5c>
 8003636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003638:	07dc      	lsls	r4, r3, #31
 800363a:	d504      	bpl.n	8003646 <_vfiprintf_r+0x4e>
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	b01d      	add	sp, #116	@ 0x74
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	0598      	lsls	r0, r3, #22
 800364a:	d4f7      	bmi.n	800363c <_vfiprintf_r+0x44>
 800364c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800364e:	f7ff feaf 	bl	80033b0 <__retarget_lock_release_recursive>
 8003652:	e7f3      	b.n	800363c <_vfiprintf_r+0x44>
 8003654:	2300      	movs	r3, #0
 8003656:	9309      	str	r3, [sp, #36]	@ 0x24
 8003658:	2320      	movs	r3, #32
 800365a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800365e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003662:	2330      	movs	r3, #48	@ 0x30
 8003664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003814 <_vfiprintf_r+0x21c>
 8003668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800366c:	f04f 0901 	mov.w	r9, #1
 8003670:	4623      	mov	r3, r4
 8003672:	469a      	mov	sl, r3
 8003674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003678:	b10a      	cbz	r2, 800367e <_vfiprintf_r+0x86>
 800367a:	2a25      	cmp	r2, #37	@ 0x25
 800367c:	d1f9      	bne.n	8003672 <_vfiprintf_r+0x7a>
 800367e:	ebba 0b04 	subs.w	fp, sl, r4
 8003682:	d00b      	beq.n	800369c <_vfiprintf_r+0xa4>
 8003684:	465b      	mov	r3, fp
 8003686:	4622      	mov	r2, r4
 8003688:	4629      	mov	r1, r5
 800368a:	4630      	mov	r0, r6
 800368c:	f7ff ffa1 	bl	80035d2 <__sfputs_r>
 8003690:	3001      	adds	r0, #1
 8003692:	f000 80a7 	beq.w	80037e4 <_vfiprintf_r+0x1ec>
 8003696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003698:	445a      	add	r2, fp
 800369a:	9209      	str	r2, [sp, #36]	@ 0x24
 800369c:	f89a 3000 	ldrb.w	r3, [sl]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 809f 	beq.w	80037e4 <_vfiprintf_r+0x1ec>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b0:	f10a 0a01 	add.w	sl, sl, #1
 80036b4:	9304      	str	r3, [sp, #16]
 80036b6:	9307      	str	r3, [sp, #28]
 80036b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80036be:	4654      	mov	r4, sl
 80036c0:	2205      	movs	r2, #5
 80036c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c6:	4853      	ldr	r0, [pc, #332]	@ (8003814 <_vfiprintf_r+0x21c>)
 80036c8:	f7fc fd82 	bl	80001d0 <memchr>
 80036cc:	9a04      	ldr	r2, [sp, #16]
 80036ce:	b9d8      	cbnz	r0, 8003708 <_vfiprintf_r+0x110>
 80036d0:	06d1      	lsls	r1, r2, #27
 80036d2:	bf44      	itt	mi
 80036d4:	2320      	movmi	r3, #32
 80036d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036da:	0713      	lsls	r3, r2, #28
 80036dc:	bf44      	itt	mi
 80036de:	232b      	movmi	r3, #43	@ 0x2b
 80036e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036e4:	f89a 3000 	ldrb.w	r3, [sl]
 80036e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ea:	d015      	beq.n	8003718 <_vfiprintf_r+0x120>
 80036ec:	9a07      	ldr	r2, [sp, #28]
 80036ee:	4654      	mov	r4, sl
 80036f0:	2000      	movs	r0, #0
 80036f2:	f04f 0c0a 	mov.w	ip, #10
 80036f6:	4621      	mov	r1, r4
 80036f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036fc:	3b30      	subs	r3, #48	@ 0x30
 80036fe:	2b09      	cmp	r3, #9
 8003700:	d94b      	bls.n	800379a <_vfiprintf_r+0x1a2>
 8003702:	b1b0      	cbz	r0, 8003732 <_vfiprintf_r+0x13a>
 8003704:	9207      	str	r2, [sp, #28]
 8003706:	e014      	b.n	8003732 <_vfiprintf_r+0x13a>
 8003708:	eba0 0308 	sub.w	r3, r0, r8
 800370c:	fa09 f303 	lsl.w	r3, r9, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	46a2      	mov	sl, r4
 8003716:	e7d2      	b.n	80036be <_vfiprintf_r+0xc6>
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	1d19      	adds	r1, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	9103      	str	r1, [sp, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfbb      	ittet	lt
 8003724:	425b      	neglt	r3, r3
 8003726:	f042 0202 	orrlt.w	r2, r2, #2
 800372a:	9307      	strge	r3, [sp, #28]
 800372c:	9307      	strlt	r3, [sp, #28]
 800372e:	bfb8      	it	lt
 8003730:	9204      	strlt	r2, [sp, #16]
 8003732:	7823      	ldrb	r3, [r4, #0]
 8003734:	2b2e      	cmp	r3, #46	@ 0x2e
 8003736:	d10a      	bne.n	800374e <_vfiprintf_r+0x156>
 8003738:	7863      	ldrb	r3, [r4, #1]
 800373a:	2b2a      	cmp	r3, #42	@ 0x2a
 800373c:	d132      	bne.n	80037a4 <_vfiprintf_r+0x1ac>
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	1d1a      	adds	r2, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9203      	str	r2, [sp, #12]
 8003746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800374a:	3402      	adds	r4, #2
 800374c:	9305      	str	r3, [sp, #20]
 800374e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003824 <_vfiprintf_r+0x22c>
 8003752:	7821      	ldrb	r1, [r4, #0]
 8003754:	2203      	movs	r2, #3
 8003756:	4650      	mov	r0, sl
 8003758:	f7fc fd3a 	bl	80001d0 <memchr>
 800375c:	b138      	cbz	r0, 800376e <_vfiprintf_r+0x176>
 800375e:	9b04      	ldr	r3, [sp, #16]
 8003760:	eba0 000a 	sub.w	r0, r0, sl
 8003764:	2240      	movs	r2, #64	@ 0x40
 8003766:	4082      	lsls	r2, r0
 8003768:	4313      	orrs	r3, r2
 800376a:	3401      	adds	r4, #1
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003772:	4829      	ldr	r0, [pc, #164]	@ (8003818 <_vfiprintf_r+0x220>)
 8003774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003778:	2206      	movs	r2, #6
 800377a:	f7fc fd29 	bl	80001d0 <memchr>
 800377e:	2800      	cmp	r0, #0
 8003780:	d03f      	beq.n	8003802 <_vfiprintf_r+0x20a>
 8003782:	4b26      	ldr	r3, [pc, #152]	@ (800381c <_vfiprintf_r+0x224>)
 8003784:	bb1b      	cbnz	r3, 80037ce <_vfiprintf_r+0x1d6>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	3307      	adds	r3, #7
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	3308      	adds	r3, #8
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003794:	443b      	add	r3, r7
 8003796:	9309      	str	r3, [sp, #36]	@ 0x24
 8003798:	e76a      	b.n	8003670 <_vfiprintf_r+0x78>
 800379a:	fb0c 3202 	mla	r2, ip, r2, r3
 800379e:	460c      	mov	r4, r1
 80037a0:	2001      	movs	r0, #1
 80037a2:	e7a8      	b.n	80036f6 <_vfiprintf_r+0xfe>
 80037a4:	2300      	movs	r3, #0
 80037a6:	3401      	adds	r4, #1
 80037a8:	9305      	str	r3, [sp, #20]
 80037aa:	4619      	mov	r1, r3
 80037ac:	f04f 0c0a 	mov.w	ip, #10
 80037b0:	4620      	mov	r0, r4
 80037b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037b6:	3a30      	subs	r2, #48	@ 0x30
 80037b8:	2a09      	cmp	r2, #9
 80037ba:	d903      	bls.n	80037c4 <_vfiprintf_r+0x1cc>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0c6      	beq.n	800374e <_vfiprintf_r+0x156>
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	e7c4      	b.n	800374e <_vfiprintf_r+0x156>
 80037c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037c8:	4604      	mov	r4, r0
 80037ca:	2301      	movs	r3, #1
 80037cc:	e7f0      	b.n	80037b0 <_vfiprintf_r+0x1b8>
 80037ce:	ab03      	add	r3, sp, #12
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	462a      	mov	r2, r5
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <_vfiprintf_r+0x228>)
 80037d6:	a904      	add	r1, sp, #16
 80037d8:	4630      	mov	r0, r6
 80037da:	f3af 8000 	nop.w
 80037de:	4607      	mov	r7, r0
 80037e0:	1c78      	adds	r0, r7, #1
 80037e2:	d1d6      	bne.n	8003792 <_vfiprintf_r+0x19a>
 80037e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037e6:	07d9      	lsls	r1, r3, #31
 80037e8:	d405      	bmi.n	80037f6 <_vfiprintf_r+0x1fe>
 80037ea:	89ab      	ldrh	r3, [r5, #12]
 80037ec:	059a      	lsls	r2, r3, #22
 80037ee:	d402      	bmi.n	80037f6 <_vfiprintf_r+0x1fe>
 80037f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037f2:	f7ff fddd 	bl	80033b0 <__retarget_lock_release_recursive>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	065b      	lsls	r3, r3, #25
 80037fa:	f53f af1f 	bmi.w	800363c <_vfiprintf_r+0x44>
 80037fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003800:	e71e      	b.n	8003640 <_vfiprintf_r+0x48>
 8003802:	ab03      	add	r3, sp, #12
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	462a      	mov	r2, r5
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <_vfiprintf_r+0x228>)
 800380a:	a904      	add	r1, sp, #16
 800380c:	4630      	mov	r0, r6
 800380e:	f000 f879 	bl	8003904 <_printf_i>
 8003812:	e7e4      	b.n	80037de <_vfiprintf_r+0x1e6>
 8003814:	08003f68 	.word	0x08003f68
 8003818:	08003f72 	.word	0x08003f72
 800381c:	00000000 	.word	0x00000000
 8003820:	080035d3 	.word	0x080035d3
 8003824:	08003f6e 	.word	0x08003f6e

08003828 <_printf_common>:
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	4616      	mov	r6, r2
 800382e:	4698      	mov	r8, r3
 8003830:	688a      	ldr	r2, [r1, #8]
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003838:	4293      	cmp	r3, r2
 800383a:	bfb8      	it	lt
 800383c:	4613      	movlt	r3, r2
 800383e:	6033      	str	r3, [r6, #0]
 8003840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003844:	4607      	mov	r7, r0
 8003846:	460c      	mov	r4, r1
 8003848:	b10a      	cbz	r2, 800384e <_printf_common+0x26>
 800384a:	3301      	adds	r3, #1
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	0699      	lsls	r1, r3, #26
 8003852:	bf42      	ittt	mi
 8003854:	6833      	ldrmi	r3, [r6, #0]
 8003856:	3302      	addmi	r3, #2
 8003858:	6033      	strmi	r3, [r6, #0]
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	f015 0506 	ands.w	r5, r5, #6
 8003860:	d106      	bne.n	8003870 <_printf_common+0x48>
 8003862:	f104 0a19 	add.w	sl, r4, #25
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	6832      	ldr	r2, [r6, #0]
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	42ab      	cmp	r3, r5
 800386e:	dc26      	bgt.n	80038be <_printf_common+0x96>
 8003870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	3b00      	subs	r3, #0
 8003878:	bf18      	it	ne
 800387a:	2301      	movne	r3, #1
 800387c:	0692      	lsls	r2, r2, #26
 800387e:	d42b      	bmi.n	80038d8 <_printf_common+0xb0>
 8003880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003884:	4641      	mov	r1, r8
 8003886:	4638      	mov	r0, r7
 8003888:	47c8      	blx	r9
 800388a:	3001      	adds	r0, #1
 800388c:	d01e      	beq.n	80038cc <_printf_common+0xa4>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf02      	ittt	eq
 800389a:	68e5      	ldreq	r5, [r4, #12]
 800389c:	6833      	ldreq	r3, [r6, #0]
 800389e:	1aed      	subeq	r5, r5, r3
 80038a0:	68a3      	ldr	r3, [r4, #8]
 80038a2:	bf0c      	ite	eq
 80038a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a8:	2500      	movne	r5, #0
 80038aa:	4293      	cmp	r3, r2
 80038ac:	bfc4      	itt	gt
 80038ae:	1a9b      	subgt	r3, r3, r2
 80038b0:	18ed      	addgt	r5, r5, r3
 80038b2:	2600      	movs	r6, #0
 80038b4:	341a      	adds	r4, #26
 80038b6:	42b5      	cmp	r5, r6
 80038b8:	d11a      	bne.n	80038f0 <_printf_common+0xc8>
 80038ba:	2000      	movs	r0, #0
 80038bc:	e008      	b.n	80038d0 <_printf_common+0xa8>
 80038be:	2301      	movs	r3, #1
 80038c0:	4652      	mov	r2, sl
 80038c2:	4641      	mov	r1, r8
 80038c4:	4638      	mov	r0, r7
 80038c6:	47c8      	blx	r9
 80038c8:	3001      	adds	r0, #1
 80038ca:	d103      	bne.n	80038d4 <_printf_common+0xac>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	3501      	adds	r5, #1
 80038d6:	e7c6      	b.n	8003866 <_printf_common+0x3e>
 80038d8:	18e1      	adds	r1, r4, r3
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	2030      	movs	r0, #48	@ 0x30
 80038de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038e2:	4422      	add	r2, r4
 80038e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038ec:	3302      	adds	r3, #2
 80038ee:	e7c7      	b.n	8003880 <_printf_common+0x58>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4622      	mov	r2, r4
 80038f4:	4641      	mov	r1, r8
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c8      	blx	r9
 80038fa:	3001      	adds	r0, #1
 80038fc:	d0e6      	beq.n	80038cc <_printf_common+0xa4>
 80038fe:	3601      	adds	r6, #1
 8003900:	e7d9      	b.n	80038b6 <_printf_common+0x8e>
	...

08003904 <_printf_i>:
 8003904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	7e0f      	ldrb	r7, [r1, #24]
 800390a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800390c:	2f78      	cmp	r7, #120	@ 0x78
 800390e:	4691      	mov	r9, r2
 8003910:	4680      	mov	r8, r0
 8003912:	460c      	mov	r4, r1
 8003914:	469a      	mov	sl, r3
 8003916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800391a:	d807      	bhi.n	800392c <_printf_i+0x28>
 800391c:	2f62      	cmp	r7, #98	@ 0x62
 800391e:	d80a      	bhi.n	8003936 <_printf_i+0x32>
 8003920:	2f00      	cmp	r7, #0
 8003922:	f000 80d2 	beq.w	8003aca <_printf_i+0x1c6>
 8003926:	2f58      	cmp	r7, #88	@ 0x58
 8003928:	f000 80b9 	beq.w	8003a9e <_printf_i+0x19a>
 800392c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003934:	e03a      	b.n	80039ac <_printf_i+0xa8>
 8003936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800393a:	2b15      	cmp	r3, #21
 800393c:	d8f6      	bhi.n	800392c <_printf_i+0x28>
 800393e:	a101      	add	r1, pc, #4	@ (adr r1, 8003944 <_printf_i+0x40>)
 8003940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003944:	0800399d 	.word	0x0800399d
 8003948:	080039b1 	.word	0x080039b1
 800394c:	0800392d 	.word	0x0800392d
 8003950:	0800392d 	.word	0x0800392d
 8003954:	0800392d 	.word	0x0800392d
 8003958:	0800392d 	.word	0x0800392d
 800395c:	080039b1 	.word	0x080039b1
 8003960:	0800392d 	.word	0x0800392d
 8003964:	0800392d 	.word	0x0800392d
 8003968:	0800392d 	.word	0x0800392d
 800396c:	0800392d 	.word	0x0800392d
 8003970:	08003ab1 	.word	0x08003ab1
 8003974:	080039db 	.word	0x080039db
 8003978:	08003a6b 	.word	0x08003a6b
 800397c:	0800392d 	.word	0x0800392d
 8003980:	0800392d 	.word	0x0800392d
 8003984:	08003ad3 	.word	0x08003ad3
 8003988:	0800392d 	.word	0x0800392d
 800398c:	080039db 	.word	0x080039db
 8003990:	0800392d 	.word	0x0800392d
 8003994:	0800392d 	.word	0x0800392d
 8003998:	08003a73 	.word	0x08003a73
 800399c:	6833      	ldr	r3, [r6, #0]
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6032      	str	r2, [r6, #0]
 80039a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039ac:	2301      	movs	r3, #1
 80039ae:	e09d      	b.n	8003aec <_printf_i+0x1e8>
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	1d19      	adds	r1, r3, #4
 80039b6:	6031      	str	r1, [r6, #0]
 80039b8:	0606      	lsls	r6, r0, #24
 80039ba:	d501      	bpl.n	80039c0 <_printf_i+0xbc>
 80039bc:	681d      	ldr	r5, [r3, #0]
 80039be:	e003      	b.n	80039c8 <_printf_i+0xc4>
 80039c0:	0645      	lsls	r5, r0, #25
 80039c2:	d5fb      	bpl.n	80039bc <_printf_i+0xb8>
 80039c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	da03      	bge.n	80039d4 <_printf_i+0xd0>
 80039cc:	232d      	movs	r3, #45	@ 0x2d
 80039ce:	426d      	negs	r5, r5
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039d4:	4859      	ldr	r0, [pc, #356]	@ (8003b3c <_printf_i+0x238>)
 80039d6:	230a      	movs	r3, #10
 80039d8:	e011      	b.n	80039fe <_printf_i+0xfa>
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	6833      	ldr	r3, [r6, #0]
 80039de:	0608      	lsls	r0, r1, #24
 80039e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80039e4:	d402      	bmi.n	80039ec <_printf_i+0xe8>
 80039e6:	0649      	lsls	r1, r1, #25
 80039e8:	bf48      	it	mi
 80039ea:	b2ad      	uxthmi	r5, r5
 80039ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80039ee:	4853      	ldr	r0, [pc, #332]	@ (8003b3c <_printf_i+0x238>)
 80039f0:	6033      	str	r3, [r6, #0]
 80039f2:	bf14      	ite	ne
 80039f4:	230a      	movne	r3, #10
 80039f6:	2308      	moveq	r3, #8
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039fe:	6866      	ldr	r6, [r4, #4]
 8003a00:	60a6      	str	r6, [r4, #8]
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	bfa2      	ittt	ge
 8003a06:	6821      	ldrge	r1, [r4, #0]
 8003a08:	f021 0104 	bicge.w	r1, r1, #4
 8003a0c:	6021      	strge	r1, [r4, #0]
 8003a0e:	b90d      	cbnz	r5, 8003a14 <_printf_i+0x110>
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	d04b      	beq.n	8003aac <_printf_i+0x1a8>
 8003a14:	4616      	mov	r6, r2
 8003a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a1e:	5dc7      	ldrb	r7, [r0, r7]
 8003a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a24:	462f      	mov	r7, r5
 8003a26:	42bb      	cmp	r3, r7
 8003a28:	460d      	mov	r5, r1
 8003a2a:	d9f4      	bls.n	8003a16 <_printf_i+0x112>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <_printf_i+0x144>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07df      	lsls	r7, r3, #31
 8003a34:	d508      	bpl.n	8003a48 <_printf_i+0x144>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	6861      	ldr	r1, [r4, #4]
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	bfde      	ittt	le
 8003a3e:	2330      	movle	r3, #48	@ 0x30
 8003a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a48:	1b92      	subs	r2, r2, r6
 8003a4a:	6122      	str	r2, [r4, #16]
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	464b      	mov	r3, r9
 8003a52:	aa03      	add	r2, sp, #12
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7ff fee6 	bl	8003828 <_printf_common>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d14a      	bne.n	8003af6 <_printf_i+0x1f2>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	b004      	add	sp, #16
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	4833      	ldr	r0, [pc, #204]	@ (8003b40 <_printf_i+0x23c>)
 8003a74:	2778      	movs	r7, #120	@ 0x78
 8003a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	6831      	ldr	r1, [r6, #0]
 8003a7e:	061f      	lsls	r7, r3, #24
 8003a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a84:	d402      	bmi.n	8003a8c <_printf_i+0x188>
 8003a86:	065f      	lsls	r7, r3, #25
 8003a88:	bf48      	it	mi
 8003a8a:	b2ad      	uxthmi	r5, r5
 8003a8c:	6031      	str	r1, [r6, #0]
 8003a8e:	07d9      	lsls	r1, r3, #31
 8003a90:	bf44      	itt	mi
 8003a92:	f043 0320 	orrmi.w	r3, r3, #32
 8003a96:	6023      	strmi	r3, [r4, #0]
 8003a98:	b11d      	cbz	r5, 8003aa2 <_printf_i+0x19e>
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	e7ac      	b.n	80039f8 <_printf_i+0xf4>
 8003a9e:	4827      	ldr	r0, [pc, #156]	@ (8003b3c <_printf_i+0x238>)
 8003aa0:	e7e9      	b.n	8003a76 <_printf_i+0x172>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f023 0320 	bic.w	r3, r3, #32
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	e7f6      	b.n	8003a9a <_printf_i+0x196>
 8003aac:	4616      	mov	r6, r2
 8003aae:	e7bd      	b.n	8003a2c <_printf_i+0x128>
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	6961      	ldr	r1, [r4, #20]
 8003ab6:	1d18      	adds	r0, r3, #4
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	062e      	lsls	r6, r5, #24
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0x1c0>
 8003ac0:	6019      	str	r1, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_printf_i+0x1c6>
 8003ac4:	0668      	lsls	r0, r5, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0x1bc>
 8003ac8:	8019      	strh	r1, [r3, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	4616      	mov	r6, r2
 8003ad0:	e7bc      	b.n	8003a4c <_printf_i+0x148>
 8003ad2:	6833      	ldr	r3, [r6, #0]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	6032      	str	r2, [r6, #0]
 8003ad8:	681e      	ldr	r6, [r3, #0]
 8003ada:	6862      	ldr	r2, [r4, #4]
 8003adc:	2100      	movs	r1, #0
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f7fc fb76 	bl	80001d0 <memchr>
 8003ae4:	b108      	cbz	r0, 8003aea <_printf_i+0x1e6>
 8003ae6:	1b80      	subs	r0, r0, r6
 8003ae8:	6060      	str	r0, [r4, #4]
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	2300      	movs	r3, #0
 8003af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af4:	e7aa      	b.n	8003a4c <_printf_i+0x148>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	4632      	mov	r2, r6
 8003afa:	4649      	mov	r1, r9
 8003afc:	4640      	mov	r0, r8
 8003afe:	47d0      	blx	sl
 8003b00:	3001      	adds	r0, #1
 8003b02:	d0ad      	beq.n	8003a60 <_printf_i+0x15c>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	079b      	lsls	r3, r3, #30
 8003b08:	d413      	bmi.n	8003b32 <_printf_i+0x22e>
 8003b0a:	68e0      	ldr	r0, [r4, #12]
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	bfb8      	it	lt
 8003b12:	4618      	movlt	r0, r3
 8003b14:	e7a6      	b.n	8003a64 <_printf_i+0x160>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4632      	mov	r2, r6
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d09d      	beq.n	8003a60 <_printf_i+0x15c>
 8003b24:	3501      	adds	r5, #1
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	9903      	ldr	r1, [sp, #12]
 8003b2a:	1a5b      	subs	r3, r3, r1
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dcf2      	bgt.n	8003b16 <_printf_i+0x212>
 8003b30:	e7eb      	b.n	8003b0a <_printf_i+0x206>
 8003b32:	2500      	movs	r5, #0
 8003b34:	f104 0619 	add.w	r6, r4, #25
 8003b38:	e7f5      	b.n	8003b26 <_printf_i+0x222>
 8003b3a:	bf00      	nop
 8003b3c:	08003f79 	.word	0x08003f79
 8003b40:	08003f8a 	.word	0x08003f8a

08003b44 <__sflush_r>:
 8003b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4c:	0716      	lsls	r6, r2, #28
 8003b4e:	4605      	mov	r5, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	d454      	bmi.n	8003bfe <__sflush_r+0xba>
 8003b54:	684b      	ldr	r3, [r1, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	dc02      	bgt.n	8003b60 <__sflush_r+0x1c>
 8003b5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	dd48      	ble.n	8003bf2 <__sflush_r+0xae>
 8003b60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d045      	beq.n	8003bf2 <__sflush_r+0xae>
 8003b66:	2300      	movs	r3, #0
 8003b68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b6c:	682f      	ldr	r7, [r5, #0]
 8003b6e:	6a21      	ldr	r1, [r4, #32]
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	d030      	beq.n	8003bd6 <__sflush_r+0x92>
 8003b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	0759      	lsls	r1, r3, #29
 8003b7a:	d505      	bpl.n	8003b88 <__sflush_r+0x44>
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b82:	b10b      	cbz	r3, 8003b88 <__sflush_r+0x44>
 8003b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b8c:	6a21      	ldr	r1, [r4, #32]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b0      	blx	r6
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	d106      	bne.n	8003ba6 <__sflush_r+0x62>
 8003b98:	6829      	ldr	r1, [r5, #0]
 8003b9a:	291d      	cmp	r1, #29
 8003b9c:	d82b      	bhi.n	8003bf6 <__sflush_r+0xb2>
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c48 <__sflush_r+0x104>)
 8003ba0:	410a      	asrs	r2, r1
 8003ba2:	07d6      	lsls	r6, r2, #31
 8003ba4:	d427      	bmi.n	8003bf6 <__sflush_r+0xb2>
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	6062      	str	r2, [r4, #4]
 8003baa:	04d9      	lsls	r1, r3, #19
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	d504      	bpl.n	8003bbc <__sflush_r+0x78>
 8003bb2:	1c42      	adds	r2, r0, #1
 8003bb4:	d101      	bne.n	8003bba <__sflush_r+0x76>
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	b903      	cbnz	r3, 8003bbc <__sflush_r+0x78>
 8003bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bbe:	602f      	str	r7, [r5, #0]
 8003bc0:	b1b9      	cbz	r1, 8003bf2 <__sflush_r+0xae>
 8003bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	d002      	beq.n	8003bd0 <__sflush_r+0x8c>
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f7ff fbf2 	bl	80033b4 <_free_r>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bd4:	e00d      	b.n	8003bf2 <__sflush_r+0xae>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4628      	mov	r0, r5
 8003bda:	47b0      	blx	r6
 8003bdc:	4602      	mov	r2, r0
 8003bde:	1c50      	adds	r0, r2, #1
 8003be0:	d1c9      	bne.n	8003b76 <__sflush_r+0x32>
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0c6      	beq.n	8003b76 <__sflush_r+0x32>
 8003be8:	2b1d      	cmp	r3, #29
 8003bea:	d001      	beq.n	8003bf0 <__sflush_r+0xac>
 8003bec:	2b16      	cmp	r3, #22
 8003bee:	d11e      	bne.n	8003c2e <__sflush_r+0xea>
 8003bf0:	602f      	str	r7, [r5, #0]
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	e022      	b.n	8003c3c <__sflush_r+0xf8>
 8003bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	e01b      	b.n	8003c36 <__sflush_r+0xf2>
 8003bfe:	690f      	ldr	r7, [r1, #16]
 8003c00:	2f00      	cmp	r7, #0
 8003c02:	d0f6      	beq.n	8003bf2 <__sflush_r+0xae>
 8003c04:	0793      	lsls	r3, r2, #30
 8003c06:	680e      	ldr	r6, [r1, #0]
 8003c08:	bf08      	it	eq
 8003c0a:	694b      	ldreq	r3, [r1, #20]
 8003c0c:	600f      	str	r7, [r1, #0]
 8003c0e:	bf18      	it	ne
 8003c10:	2300      	movne	r3, #0
 8003c12:	eba6 0807 	sub.w	r8, r6, r7
 8003c16:	608b      	str	r3, [r1, #8]
 8003c18:	f1b8 0f00 	cmp.w	r8, #0
 8003c1c:	dde9      	ble.n	8003bf2 <__sflush_r+0xae>
 8003c1e:	6a21      	ldr	r1, [r4, #32]
 8003c20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c22:	4643      	mov	r3, r8
 8003c24:	463a      	mov	r2, r7
 8003c26:	4628      	mov	r0, r5
 8003c28:	47b0      	blx	r6
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	dc08      	bgt.n	8003c40 <__sflush_r+0xfc>
 8003c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	4407      	add	r7, r0
 8003c42:	eba8 0800 	sub.w	r8, r8, r0
 8003c46:	e7e7      	b.n	8003c18 <__sflush_r+0xd4>
 8003c48:	dfbffffe 	.word	0xdfbffffe

08003c4c <_fflush_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	690b      	ldr	r3, [r1, #16]
 8003c50:	4605      	mov	r5, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	b913      	cbnz	r3, 8003c5c <_fflush_r+0x10>
 8003c56:	2500      	movs	r5, #0
 8003c58:	4628      	mov	r0, r5
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	b118      	cbz	r0, 8003c66 <_fflush_r+0x1a>
 8003c5e:	6a03      	ldr	r3, [r0, #32]
 8003c60:	b90b      	cbnz	r3, 8003c66 <_fflush_r+0x1a>
 8003c62:	f7ff fa9f 	bl	80031a4 <__sinit>
 8003c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f3      	beq.n	8003c56 <_fflush_r+0xa>
 8003c6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c70:	07d0      	lsls	r0, r2, #31
 8003c72:	d404      	bmi.n	8003c7e <_fflush_r+0x32>
 8003c74:	0599      	lsls	r1, r3, #22
 8003c76:	d402      	bmi.n	8003c7e <_fflush_r+0x32>
 8003c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c7a:	f7ff fb98 	bl	80033ae <__retarget_lock_acquire_recursive>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4621      	mov	r1, r4
 8003c82:	f7ff ff5f 	bl	8003b44 <__sflush_r>
 8003c86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c88:	07da      	lsls	r2, r3, #31
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	d4e4      	bmi.n	8003c58 <_fflush_r+0xc>
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	059b      	lsls	r3, r3, #22
 8003c92:	d4e1      	bmi.n	8003c58 <_fflush_r+0xc>
 8003c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c96:	f7ff fb8b 	bl	80033b0 <__retarget_lock_release_recursive>
 8003c9a:	e7dd      	b.n	8003c58 <_fflush_r+0xc>

08003c9c <__swbuf_r>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	460e      	mov	r6, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	b118      	cbz	r0, 8003cae <__swbuf_r+0x12>
 8003ca6:	6a03      	ldr	r3, [r0, #32]
 8003ca8:	b90b      	cbnz	r3, 8003cae <__swbuf_r+0x12>
 8003caa:	f7ff fa7b 	bl	80031a4 <__sinit>
 8003cae:	69a3      	ldr	r3, [r4, #24]
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	071a      	lsls	r2, r3, #28
 8003cb6:	d501      	bpl.n	8003cbc <__swbuf_r+0x20>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	b943      	cbnz	r3, 8003cce <__swbuf_r+0x32>
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 f82a 	bl	8003d18 <__swsetup_r>
 8003cc4:	b118      	cbz	r0, 8003cce <__swbuf_r+0x32>
 8003cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8003cca:	4638      	mov	r0, r7
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	6922      	ldr	r2, [r4, #16]
 8003cd2:	1a98      	subs	r0, r3, r2
 8003cd4:	6963      	ldr	r3, [r4, #20]
 8003cd6:	b2f6      	uxtb	r6, r6
 8003cd8:	4283      	cmp	r3, r0
 8003cda:	4637      	mov	r7, r6
 8003cdc:	dc05      	bgt.n	8003cea <__swbuf_r+0x4e>
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff ffb3 	bl	8003c4c <_fflush_r>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d1ed      	bne.n	8003cc6 <__swbuf_r+0x2a>
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	60a3      	str	r3, [r4, #8]
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	701e      	strb	r6, [r3, #0]
 8003cf8:	6962      	ldr	r2, [r4, #20]
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d004      	beq.n	8003d0a <__swbuf_r+0x6e>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	07db      	lsls	r3, r3, #31
 8003d04:	d5e1      	bpl.n	8003cca <__swbuf_r+0x2e>
 8003d06:	2e0a      	cmp	r6, #10
 8003d08:	d1df      	bne.n	8003cca <__swbuf_r+0x2e>
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f7ff ff9d 	bl	8003c4c <_fflush_r>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0d9      	beq.n	8003cca <__swbuf_r+0x2e>
 8003d16:	e7d6      	b.n	8003cc6 <__swbuf_r+0x2a>

08003d18 <__swsetup_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <__swsetup_r+0xa8>)
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	460c      	mov	r4, r1
 8003d22:	b118      	cbz	r0, 8003d2c <__swsetup_r+0x14>
 8003d24:	6a03      	ldr	r3, [r0, #32]
 8003d26:	b90b      	cbnz	r3, 8003d2c <__swsetup_r+0x14>
 8003d28:	f7ff fa3c 	bl	80031a4 <__sinit>
 8003d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d30:	0719      	lsls	r1, r3, #28
 8003d32:	d422      	bmi.n	8003d7a <__swsetup_r+0x62>
 8003d34:	06da      	lsls	r2, r3, #27
 8003d36:	d407      	bmi.n	8003d48 <__swsetup_r+0x30>
 8003d38:	2209      	movs	r2, #9
 8003d3a:	602a      	str	r2, [r5, #0]
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d40:	81a3      	strh	r3, [r4, #12]
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295
 8003d46:	e033      	b.n	8003db0 <__swsetup_r+0x98>
 8003d48:	0758      	lsls	r0, r3, #29
 8003d4a:	d512      	bpl.n	8003d72 <__swsetup_r+0x5a>
 8003d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d4e:	b141      	cbz	r1, 8003d62 <__swsetup_r+0x4a>
 8003d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d54:	4299      	cmp	r1, r3
 8003d56:	d002      	beq.n	8003d5e <__swsetup_r+0x46>
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f7ff fb2b 	bl	80033b4 <_free_r>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6063      	str	r3, [r4, #4]
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	b94b      	cbnz	r3, 8003d92 <__swsetup_r+0x7a>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d003      	beq.n	8003d92 <__swsetup_r+0x7a>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f84f 	bl	8003e30 <__smakebuf_r>
 8003d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d96:	f013 0201 	ands.w	r2, r3, #1
 8003d9a:	d00a      	beq.n	8003db2 <__swsetup_r+0x9a>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60a2      	str	r2, [r4, #8]
 8003da0:	6962      	ldr	r2, [r4, #20]
 8003da2:	4252      	negs	r2, r2
 8003da4:	61a2      	str	r2, [r4, #24]
 8003da6:	6922      	ldr	r2, [r4, #16]
 8003da8:	b942      	cbnz	r2, 8003dbc <__swsetup_r+0xa4>
 8003daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dae:	d1c5      	bne.n	8003d3c <__swsetup_r+0x24>
 8003db0:	bd38      	pop	{r3, r4, r5, pc}
 8003db2:	0799      	lsls	r1, r3, #30
 8003db4:	bf58      	it	pl
 8003db6:	6962      	ldrpl	r2, [r4, #20]
 8003db8:	60a2      	str	r2, [r4, #8]
 8003dba:	e7f4      	b.n	8003da6 <__swsetup_r+0x8e>
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	e7f7      	b.n	8003db0 <__swsetup_r+0x98>
 8003dc0:	20000018 	.word	0x20000018

08003dc4 <_sbrk_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4d06      	ldr	r5, [pc, #24]	@ (8003de0 <_sbrk_r+0x1c>)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	602b      	str	r3, [r5, #0]
 8003dd0:	f7fc fec8 	bl	8000b64 <_sbrk>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_sbrk_r+0x1a>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_sbrk_r+0x1a>
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	20000258 	.word	0x20000258

08003de4 <__swhatbuf_r>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	460c      	mov	r4, r1
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	2900      	cmp	r1, #0
 8003dee:	b096      	sub	sp, #88	@ 0x58
 8003df0:	4615      	mov	r5, r2
 8003df2:	461e      	mov	r6, r3
 8003df4:	da0d      	bge.n	8003e12 <__swhatbuf_r+0x2e>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2340      	movne	r3, #64	@ 0x40
 8003e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e08:	2000      	movs	r0, #0
 8003e0a:	6031      	str	r1, [r6, #0]
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	b016      	add	sp, #88	@ 0x58
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
 8003e12:	466a      	mov	r2, sp
 8003e14:	f000 f848 	bl	8003ea8 <_fstat_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dbec      	blt.n	8003df6 <__swhatbuf_r+0x12>
 8003e1c:	9901      	ldr	r1, [sp, #4]
 8003e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e26:	4259      	negs	r1, r3
 8003e28:	4159      	adcs	r1, r3
 8003e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e2e:	e7eb      	b.n	8003e08 <__swhatbuf_r+0x24>

08003e30 <__smakebuf_r>:
 8003e30:	898b      	ldrh	r3, [r1, #12]
 8003e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e34:	079d      	lsls	r5, r3, #30
 8003e36:	4606      	mov	r6, r0
 8003e38:	460c      	mov	r4, r1
 8003e3a:	d507      	bpl.n	8003e4c <__smakebuf_r+0x1c>
 8003e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	2301      	movs	r3, #1
 8003e46:	6163      	str	r3, [r4, #20]
 8003e48:	b003      	add	sp, #12
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4c:	ab01      	add	r3, sp, #4
 8003e4e:	466a      	mov	r2, sp
 8003e50:	f7ff ffc8 	bl	8003de4 <__swhatbuf_r>
 8003e54:	9f00      	ldr	r7, [sp, #0]
 8003e56:	4605      	mov	r5, r0
 8003e58:	4639      	mov	r1, r7
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff fb16 	bl	800348c <_malloc_r>
 8003e60:	b948      	cbnz	r0, 8003e76 <__smakebuf_r+0x46>
 8003e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e66:	059a      	lsls	r2, r3, #22
 8003e68:	d4ee      	bmi.n	8003e48 <__smakebuf_r+0x18>
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	f043 0302 	orr.w	r3, r3, #2
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	e7e2      	b.n	8003e3c <__smakebuf_r+0xc>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	6020      	str	r0, [r4, #0]
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e86:	b15b      	cbz	r3, 8003ea0 <__smakebuf_r+0x70>
 8003e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 f81d 	bl	8003ecc <_isatty_r>
 8003e92:	b128      	cbz	r0, 8003ea0 <__smakebuf_r+0x70>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	431d      	orrs	r5, r3
 8003ea4:	81a5      	strh	r5, [r4, #12]
 8003ea6:	e7cf      	b.n	8003e48 <__smakebuf_r+0x18>

08003ea8 <_fstat_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ec8 <_fstat_r+0x20>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	f7fc fe2d 	bl	8000b14 <_fstat>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	d102      	bne.n	8003ec4 <_fstat_r+0x1c>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	b103      	cbz	r3, 8003ec4 <_fstat_r+0x1c>
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000258 	.word	0x20000258

08003ecc <_isatty_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d06      	ldr	r5, [pc, #24]	@ (8003ee8 <_isatty_r+0x1c>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fc fe2c 	bl	8000b34 <_isatty>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_isatty_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_isatty_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000258 	.word	0x20000258

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
